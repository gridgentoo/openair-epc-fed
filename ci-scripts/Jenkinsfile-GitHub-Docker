#!/bin/groovy
/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this file
 * except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

//-------------------------------------------------------------------------------
// Abstraction function to send social media messages:
// like on Slack or Mattermost
def sendSocialMediaMessage(pipeChannel, pipeColor, pipeMessage) {
  if (params.pipelineUsesSlack != null) {
    if (params.pipelineUsesSlack) {
      slackSend channel: pipeChannel, color: pipeColor, message: pipeMessage
    }
  }
}

// Location of the CN executor node
def cn_ci_host = params.Host_CN_CI_Server

// for lock
def cn_ci_resource = params.DockerContainers
def ds_tester_ci_resource = params.DsTester

// Location of the 2nd CN executor
def new_host_flag = false
def new_host = ""
def new_host_user = ""

// Location of the CN tester
def dsT_host_flag = false
def dsT_host = ""
def dsT_host_user = ""
def dsT_host_ip_addr = ""

// Flags
def scmEvent = false
def upstreamEvent = false

// Default tags / branches  --> could be passed on by upstream job or by PR content
def hssTag = 'develop'
def hssBranch = 'develop'
def hssRebuildFlag = false
def mmeTag = 'develop'
def mmeBranch = 'develop'
def mmeRebuildFlag = false
def spgwcTag = 'develop'
def spgwcBranch = 'develop'
def spgwcRebuildFlag = false
def spgwuTag = 'develop'
def spgwuBranch = 'develop'
def spgwuRebuildFlag = false
def anyRebuildFlag = false

//-------------------------------------------------------------------------------
// Pipeline start
pipeline {
  agent {
    label cn_ci_host
  }
  options {
    disableConcurrentBuilds()
    timestamps()
    ansiColor('xterm')
    lock(cn_ci_resource)
  }
  stages {
    stage ('Verify Parameters') {
      steps {
        script {
          echo '\u2705 \u001B[32mVerify Parameters\u001B[0m'

          JOB_TIMESTAMP = sh returnStdout: true, script: 'date --utc --rfc-3339=seconds | sed -e "s#+00:00##"'
          JOB_TIMESTAMP = JOB_TIMESTAMP.trim()

          if (params.Host_CN_CI_2nd_Server_Flag != null) {
            new_host_flag = params.Host_CN_CI_2nd_Server_Flag
            if (new_host_flag) {
              new_host = params.Host_CN_CI_2nd_Server
              new_host_user = params.Host_CN_CI_2nd_Server_Login
              echo "1st Node   is ${NODE_NAME}"
              echo "2nd Node   is ${new_host}"
            } else {
              echo "Node       is ${NODE_NAME}"
            }
          } else {
            echo "Node       is ${NODE_NAME}"
          }
          if (params.DS_Tester_Server_Flag != null) {
            dsT_host_flag = params.DS_Tester_Server_Flag
            if (dsT_host_flag) {
              def allParametersPresent = true
              if (params.DS_Tester_Server_Name == null) {
                allParametersPresent = false
              } else {
                dsT_host = params.DS_Tester_Server_Name
              }
              if (params.DS_Tester_Server_Login == null) {
                allParametersPresent = false
              } else {
                dsT_host_user = params.DS_Tester_Server_Login
              }
              if (params.DS_Tester_Server_IP_Addr == null) {
                allParametersPresent = false
              } else {
                dsT_host_ip_addr = params.DS_Tester_Server_IP_Addr
              }
              if (allParametersPresent) {
                echo "DS Tester  is on ${dsT_host}"
              } else {
                echo "Some DS Tester parameters are missing!"
                sh "./ci-scripts/fail.sh"
              }
            }
          }

          // Find out the cause of the trigger
          for (cause in currentBuild.getBuildCauses()) {
            if (cause.toString() ==~ /.*GitHubPushCause.*/) {
              scmEvent = true
            } else if (cause.toString() ==~ /.*GhprbCause.*/) {
              scmEvent = true
            } else if (cause.toString() ==~ /.*UpstreamCause.*/) {
              upstreamEvent = true
            }
          }

          if (scmEvent) {
            // We work on the default tags if it is a push
            // If it's a PR, we should recover tags/branch and maybe to rebuild images
            sh "git clean -x -d -f > /dev/null 2>&1"
            if (env.ghprbPullId != null) {
              sh "./ci-scripts/doGitHubPullRequestTempMerge.sh --src-branch ${env.ghprbSourceBranch} --src-commit ${env.ghprbActualCommit} --target-branch ${env.ghprbTargetBranch} --target-commit ${GIT_COMMIT}"
              if (fileExists('ci-scripts/branchesToTest.txt')) {
                def branchFilePath = readFile('ci-scripts/branchesToTest.txt')
                def lines = branchFilePath.readLines()
                for (line in lines) {
                  if (line.trim() ==~ /^HSS: .*/) {
                    hssBranch = line.trim().replaceFirst(/^HSS: /,'')
                    if (hssBranch != 'develop') {
                      echo "HSS branch (to be re-built) is " + hssBranch
                      anyRebuildFlag = true
                      hssRebuildFlag = true
                      hssTag = 'fed-temp'
                    }
                  }
                  if (line.trim() ==~ /^MME: .*/) {
                    mmeBranch = line.trim().replaceFirst(/^MME: /,'')
                    if (mmeBranch != 'develop') {
                      echo "MME branch (to be re-built) is " + mmeBranch
                      anyRebuildFlag = true
                      mmeRebuildFlag = true
                      mmeTag = 'fed-temp'
                    }
                  }
                  if (line.trim() ==~ /^SPGW-C: .*/) {
                    spgwcBranch = line.trim().replaceFirst(/^SPGW-C: /,'')
                    if (spgwcBranch != 'develop') {
                      echo "SPGW-C branch (to be re-built) is " + spgwcBranch
                      anyRebuildFlag = true
                      spgwcRebuildFlag = true
                      spgwcTag = 'fed-temp'
                    }
                  }
                  if (line.trim() ==~ /^SPGW-U-TINY: .*/) {
                    spgwuBranch = line.trim().replaceFirst(/^SPGW-U-TINY: /,'')
                    if (spgwuBranch != 'develop') {
                      echo "SPGW-U-TINY branch (to be re-built) is " + spgwuBranch
                      anyRebuildFlag = true
                      spgwuRebuildFlag = true
                      spgwuTag = 'fed-temp'
                    }
                  }
                }
              }
              sh './scripts/syncComponents.sh --hss-branch ' + hssBranch + ' --mme-branch ' + mmeBranch + ' --spgwc-branch ' + spgwcBranch + ' --spgwu-tiny-branch ' + spgwuBranch
            } else {
              sh './scripts/syncComponents.sh'
            }
            sh "mkdir archives"
            sh "mkdir archives/oai-hss-cfg"
            sh "mkdir archives/oai-mme-cfg"
            sh "mkdir archives/oai-spgwc-cfg"
            sh "mkdir archives/oai-spgwu-cfg"
            if (new_host_flag) {
              // Prepare the workspace in remote server
              myShCmd("if [ ! -e .git ]; then git clone --quiet ${GIT_URL} .; else git fetch --quiet --prune; fi", new_host_flag, new_host_user, new_host)
              myShCmd('git clean -x -d -f > /dev/null 2>&1', new_host_flag, new_host_user, new_host)
              myShCmd("git checkout -f ${GIT_COMMIT}", new_host_flag, new_host_user, new_host)
              myShCmd('./scripts/syncComponents.sh --hss-branch ' + hssBranch + ' --mme-branch ' + mmeBranch + ' --spgwc-branch ' + spgwcBranch + ' --spgwu-tiny-branch ' + spgwuBranch, new_host_flag, new_host_user, new_host)
              myShCmd('mkdir archives', new_host_flag, new_host_user, new_host)
            }
          }
          if (upstreamEvent) {
            if (params.HSS_TAG != null) {
              hssTag = params.HSS_TAG
              echo "Upstream Job passed HSS_TAG to use: ${hssTag}"
            }
            if (params.HSS_BRANCH != null) {
              hssBranch = params.HSS_BRANCH
              echo "Upstream Job passed HSS_BRANCH to use: ${hssBranch}"
            }
            if (params.MME_TAG != null) {
              mmeTag = params.MME_TAG
              echo "Upstream Job passed MME_TAG to use: ${mmeTag}"
            }
            if (params.MME_BRANCH != null) {
              mmeBranch = params.MME_BRANCH
              echo "Upstream Job passed HSS_BRANCH to use: ${mmeBranch}"
            }
            if (params.SPGWC_TAG != null) {
              spgwcTag = params.SPGWC_TAG
              echo "Upstream Job passed SPGWC_TAG to use: ${spgwcTag}"
            }
            if (params.SPGWC_BRANCH != null) {
              spgwcBranch = params.SPGWC_BRANCH
              echo "Upstream Job passed SPGWC_BRANCH to use: ${spgwcBranch}"
            }
            if (params.SPGWU_TAG != null) {
              spgwuTag = params.SPGWU_TAG
              echo "Upstream Job passed SPGWU_TAG to use: ${spgwuTag}"
            }
            if (params.SPGWU_BRANCH != null) {
              spgwuBranch = params.SPGWU_BRANCH
              echo "Upstream Job passed SPGWU_BRANCH to use: ${spgwuBranch}"
            }
            sh "git clean -x -d -f > /dev/null 2>&1"
            sh "git checkout -f master"
            sh "git pull origin master"
            sh './scripts/syncComponents.sh --hss-branch ' + hssBranch + ' --mme-branch ' + mmeBranch + ' --spgwc-branch ' + spgwcBranch + ' --spgwu-tiny-branch ' + spgwuBranch
            sh "mkdir archives"
            sh "mkdir archives/oai-hss-cfg"
            sh "mkdir archives/oai-mme-cfg"
            sh "mkdir archives/oai-spgwc-cfg"
            sh "mkdir archives/oai-spgwu-cfg"
            if (new_host_flag) {
              // Prepare the workspace in remote server
              myShCmd("if [ ! -e .git ]; then git clone --quiet ${GIT_URL} .; else git fetch --quiet --prune; fi", new_host_flag, new_host_user, new_host)
              myShCmd('git clean -x -d -f > /dev/null 2>&1', new_host_flag, new_host_user, new_host)
              myShCmd('git checkout -f master', new_host_flag, new_host_user, new_host)
              myShCmd('git pull origin master', new_host_flag, new_host_user, new_host)
              myShCmd('./scripts/syncComponents.sh --hss-branch ' + hssBranch + ' --mme-branch ' + mmeBranch + ' --spgwc-branch ' + spgwcBranch + ' --spgwu-tiny-branch ' + spgwuBranch, new_host_flag, new_host_user, new_host)
              myShCmd('mkdir archives', new_host_flag, new_host_user, new_host)
            }
          }
        }
      }
    }
    stage ('Build Temporary Images') {
      when { expression {anyRebuildFlag} }
      parallel {
        stage ('Build HSS Temp Image') {
          when { expression {hssRebuildFlag} }
          steps {
            script {
              cmd = 'cd component/oai-hss && git log -1 --pretty=format:"%H" origin/' + hssBranch
              hssCommit = sh returnStdout: true, script: "${cmd}"
              hssCommit = hssCommit.trim()
              echo "Rebuild HSS Temporary Image on Commit: " + hssCommit
              myShCmd('docker build --target oai-hss --tag oai-hss:' + hssTag + ' --file component/oai-hss/ci-scripts/Dockerfile.ubuntu18.04 --build-arg EURECOM_PROXY="http://proxy.eurecom.fr:8080" --build-arg BUILD_FOR_CI="True" --build-arg CI_SRC_BRANCH="' + hssBranch + '" --build-arg CI_SRC_COMMIT="' + hssCommit + '" --build-arg CI_DEST_BRANCH="develop" . > archives/hss_docker_image_build.log 2>&1', new_host_flag, new_host_user, new_host)
            }
          }
        }
        stage ('Build MME Temp Image') {
          when { expression {mmeRebuildFlag} }
          steps {
            script {
              cmd = 'cd component/oai-mme && git log -1 --pretty=format:"%H" origin/' + mmeBranch
              mmeCommit = sh returnStdout: true, script: "${cmd}"
              mmeCommit = mmeCommit.trim()
              echo "Rebuild MME Temporary Image on Commit: " + mmeCommit
              myShCmd('docker build --target oai-mme --tag oai-mme:' + mmeTag + ' --file component/oai-mme/ci-scripts/Dockerfile.ubuntu18.04 --build-arg EURECOM_PROXY="http://proxy.eurecom.fr:8080" --build-arg BUILD_FOR_CI="True" --build-arg CI_SRC_BRANCH="' + mmeBranch + '" --build-arg CI_SRC_COMMIT="' + mmeCommit + '" --build-arg CI_DEST_BRANCH="develop" . > archives/mme_docker_image_build.log 2>&1', new_host_flag, new_host_user, new_host)
            }
          }
        }
        stage ('Build SPGW-C Temp Image') {
          when { expression {spgwcRebuildFlag} }
          steps {
            script {
              cmd = 'cd component/oai-spgwc && git log -1 --pretty=format:"%H" origin/' + spgwcBranch
              spgwcCommit = sh returnStdout: true, script: "${cmd}"
              spgwcCommit = spgwcCommit.trim()
              echo "Rebuild SPGW-C Temporary Image on Commit: " + spgwcCommit
              myShCmd('docker build --target oai-spgwc --tag oai-spgwc:' + spgwcTag + ' --file component/oai-spgwc/ci-scripts/Dockerfile.ubuntu18.04 --build-arg EURECOM_PROXY="http://proxy.eurecom.fr:8080" --build-arg BUILD_FOR_CI="True" --build-arg CI_SRC_BRANCH="' + spgwcBranch + '" --build-arg CI_SRC_COMMIT="' + spgwcCommit + '" --build-arg CI_DEST_BRANCH="develop" . > archives/spgwc_docker_image_build.log 2>&1', new_host_flag, new_host_user, new_host)
            }
          }
        }
        stage ('Build SPGW-U-TINY Temp Image') {
          when { expression {spgwuRebuildFlag} }
          steps {
            script {
              cmd = 'cd component/oai-spgwu-tiny && git log -1 --pretty=format:"%H" origin/' + spgwuBranch
              spgwuCommit = sh returnStdout: true, script: "${cmd}"
              spgwuCommit = spgwuCommit.trim()
              echo "Rebuild SPGW-U-TINY Temporary Image on Commit: " + spgwuCommit
              myShCmd('docker build --target oai-spgwu-tiny --tag oai-spgwu-tiny:' + spgwuTag + ' --file component/oai-spgwu-tiny/ci-scripts/Dockerfile.ubuntu18.04 --build-arg EURECOM_PROXY="http://proxy.eurecom.fr:8080" --build-arg BUILD_FOR_CI="True" --build-arg CI_SRC_BRANCH="' + spgwuBranch + '" --build-arg CI_SRC_COMMIT="' + spgwuCommit + '" --build-arg CI_DEST_BRANCH="develop" . > archives/spgwu_docker_image_build.log 2>&1', new_host_flag, new_host_user, new_host)
            }
          }
        }
      }
      post {
        always {
          script {
            if (hssRebuildFlag) {
              copyFrom2ndServer('archives/hss_docker_image_build.log', 'archives', new_host_flag, new_host_user, new_host)
            }
            if (mmeRebuildFlag) {
              copyFrom2ndServer('archives/mme_docker_image_build.log', 'archives', new_host_flag, new_host_user, new_host)
            }
            if (spgwcRebuildFlag) {
              copyFrom2ndServer('archives/spgwc_docker_image_build.log', 'archives', new_host_flag, new_host_user, new_host)
            }
            if (spgwuRebuildFlag) {
              copyFrom2ndServer('archives/spgwu_docker_image_build.log', 'archives', new_host_flag, new_host_user, new_host)
            }
          }
        }
      }
    }
    stage ('Deploy Whole EPC') {
      stages {
        stage ('Create Public Network') {
          steps {
            script {
              myShCmd('docker network create --attachable --subnet 192.168.61.192/26 --ip-range 192.168.61.192/26 cicd-oai-public-net', new_host_flag, new_host_user, new_host)
            }
          }
        }
        stage ('Deploy Containers') {
          steps {
            script {
              myShCmd('docker run --name cicd-cassandra -d -e CASSANDRA_CLUSTER_NAME="OAI HSS Cluster" -e CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch cassandra:2.1', new_host_flag, new_host_user, new_host)
              myShCmd('docker run --privileged --name cicd-oai-hss -d oai-hss:' + hssTag + ' /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
              myShCmd('docker network connect cicd-oai-public-net cicd-oai-hss', new_host_flag, new_host_user, new_host)
              myShCmd('docker run --privileged --name cicd-oai-mme --network cicd-oai-public-net -d oai-mme:' + mmeTag + ' /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
              myShCmd('docker run --privileged --name cicd-oai-spgwc --network cicd-oai-public-net -d oai-spgwc:' + spgwcTag + ' /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
              myShCmd('docker run --privileged --name cicd-oai-spgwu-tiny --network cicd-oai-public-net -d oai-spgwu-tiny:' + spgwuTag + ' /bin/bash -c "sleep infinity"', new_host_flag, new_host_user, new_host)
              // Configuring Cassandra
              myShCmd('docker cp component/oai-hss/src/hss_rel14/db/oai_db.cql cicd-cassandra:/home', new_host_flag, new_host_user, new_host)
              sh "sleep 5"
              myShCmdWithLog('docker exec -it cicd-cassandra /bin/bash -c "nodetool status"', 'archives/cassandra_status.log', new_host_flag, new_host_user, new_host)
              Cassandra_IP = myShRetCmd('docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" cicd-cassandra', new_host_flag, new_host_user, new_host)
              myShCmd('docker exec -it cicd-cassandra /bin/bash -c "cqlsh --file /home/oai_db.cql ' + Cassandra_IP + '"', new_host_flag, new_host_user, new_host)

              // Configuring HSS
              HSS_IP = myShRetCmd('docker exec -it cicd-oai-hss /bin/bash -c "ifconfig eth1 | grep inet" | sed -f ./ci-scripts/convertIpAddrFromIfconfig.sed', new_host_flag, new_host_user, new_host)
              // Using parameters for DS Tester Scenarios
              myShCmd('python3 component/oai-hss/ci-scripts/generateConfigFiles.py --kind=HSS --cassandra=' + Cassandra_IP + ' --hss_s6a=' + HSS_IP + ' --apn1=apn1.carrier.com --apn2=apn2.carrier.com --users=200 --imsi=320230100000001 --ltek=0c0a34601d4f07677303652c0462535b --op=63bfa50ee6523365ff14c1f45f88737d --nb_mmes=4 --from_docker_file', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp ./hss-cfg.sh cicd-oai-hss:/openair-hss/scripts', new_host_flag, new_host_user, new_host)
              myShCmdWithLog('docker exec -it cicd-oai-hss /bin/bash -c "cd /openair-hss/scripts && chmod 777 hss-cfg.sh && ./hss-cfg.sh"', 'archives/hss_config.log', new_host_flag, new_host_user, new_host)

              // Configuring MME
              MME_IP = myShRetCmd('docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" cicd-oai-mme', new_host_flag, new_host_user, new_host)
              SPGW0_IP = myShRetCmd('docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" cicd-oai-spgwc', new_host_flag, new_host_user, new_host)
              // Using parameters for DS Tester Scenarios
              myShCmd('python3 component/oai-mme/ci-scripts/generateConfigFiles.py --kind=MME --hss_s6a=' + HSS_IP + ' --mme_s6a=' + MME_IP + ' --mme_s1c_IP=' + MME_IP + ' --mme_s1c_name=eth0 --mme_s10_IP=' + MME_IP + ' --mme_s10_name=eth0 --mme_s11_IP=' + MME_IP + ' --mme_s11_name=eth0 --spgwc0_s11_IP=' + SPGW0_IP + ' --mme_gid=455 --mme_code=5 --mcc=320 --mnc=230 --tac_list="5 6 7" --from_docker_file', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp ./mme-cfg.sh cicd-oai-mme:/openair-mme/scripts', new_host_flag, new_host_user, new_host)
              myShCmdWithLog('docker exec -it cicd-oai-mme /bin/bash -c "cd /openair-mme/scripts && chmod 777 mme-cfg.sh && ./mme-cfg.sh"', 'archives/mme_config.log', new_host_flag, new_host_user, new_host)

              // Configuring SPGW-C
              // Using parameters for DS Tester Scenarios
              myShCmd('python3 component/oai-spgwc/ci-scripts/generateConfigFiles.py --kind=SPGW-C --s11c=eth0 --sxc=eth0 --apn=apn1.carrier.com --from_docker_file', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp ./spgwc-cfg.sh cicd-oai-spgwc:/openair-spgwc', new_host_flag, new_host_user, new_host)
              myShCmdWithLog('docker exec -it cicd-oai-spgwc /bin/bash -c "cd /openair-spgwc && chmod 777 spgwc-cfg.sh && ./spgwc-cfg.sh"', 'archives/spgwc_config.log', new_host_flag, new_host_user, new_host)

              // Configuring SPGW-U
              myShCmd('python3 component/oai-spgwu-tiny/ci-scripts/generateConfigFiles.py --kind=SPGW-U --sxc_ip_addr=' + SPGW0_IP + ' --sxu=eth0 --s1u=eth0 --from_docker_file', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp ./spgwu-cfg.sh cicd-oai-spgwu-tiny:/openair-spgwu-tiny', new_host_flag, new_host_user, new_host)
              myShCmdWithLog('docker exec -it cicd-oai-spgwu-tiny /bin/bash -c "cd /openair-spgwu-tiny && chmod 777 spgwu-cfg.sh && ./spgwu-cfg.sh"', 'archives/spgwu_config.log', new_host_flag, new_host_user, new_host)

              // Recovering all configuration files
              myShCmd('docker cp cicd-oai-hss:/openair-hss/etc/. archives/oai-hss-cfg', new_host_flag, new_host_user, new_host)
              copyFrom2ndServer('archives/oai-hss-cfg/*.*', 'archives/oai-hss-cfg', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-mme:/openair-mme/etc/. archives/oai-mme-cfg', new_host_flag, new_host_user, new_host)
              copyFrom2ndServer('archives/oai-mme-cfg/*.*', 'archives/oai-mme-cfg', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-spgwc:/openair-spgwc/etc/. archives/oai-spgwc-cfg', new_host_flag, new_host_user, new_host)
              copyFrom2ndServer('archives/oai-spgwc-cfg/*.*', 'archives/oai-spgwc-cfg', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-spgwu-tiny:/openair-spgwu-tiny/etc/. archives/oai-spgwu-cfg', new_host_flag, new_host_user, new_host)
              copyFrom2ndServer('archives/oai-spgwu-cfg/*.*', 'archives/oai-spgwu-cfg', new_host_flag, new_host_user, new_host)

              // Starting the captures in each container
              myShCmd('docker exec -d cicd-oai-hss /bin/bash -c "nohup tshark -i eth0 -i eth1 -w /tmp/hss_check_run.pcap 2>&1 > /dev/null"', new_host_flag, new_host_user, new_host)
              myShCmd('docker exec -d cicd-oai-mme /bin/bash -c "nohup tshark -i eth0 -i lo:s10 -w /tmp/mme_check_run.pcap 2>&1 > /dev/null"', new_host_flag, new_host_user, new_host)
              myShCmd('docker exec -d cicd-oai-spgwc /bin/bash -c "nohup tshark -i eth0 -i lo:p5c -i lo:s5c -w /tmp/spgwc_check_run.pcap 2>&1 > /dev/null"', new_host_flag, new_host_user, new_host)
              myShCmd('docker exec -d cicd-oai-spgwu-tiny /bin/bash -c "nohup tshark -i eth0 -w /tmp/spgwu_check_run.pcap 2>&1 > /dev/null"', new_host_flag, new_host_user, new_host)
              sh "sleep 10"

              // Starting the cNF
              myShCmd('docker exec -d cicd-oai-hss /bin/bash -c "nohup ./bin/oai_hss -j ./etc/hss_rel14.json --reloadkey true > hss_check_run.log 2>&1"', new_host_flag, new_host_user, new_host)
              sh "sleep 2"
              myShCmd('docker exec -d cicd-oai-mme /bin/bash -c "nohup ./bin/oai_mme -c ./etc/mme.conf > mme_check_run.log 2>&1"', new_host_flag, new_host_user, new_host)
              sh "sleep 2"
              myShCmd('docker exec -d cicd-oai-spgwc /bin/bash -c "nohup ./bin/oai_spgwc -o -c ./etc/spgw_c.conf > spgwc_check_run.log 2>&1"', new_host_flag, new_host_user, new_host)
              sh "sleep 2"
              myShCmd('docker exec -d cicd-oai-spgwu-tiny /bin/bash -c "nohup ./bin/oai_spgwu -o -c ./etc/spgw_u.conf > spgwu_check_run.log 2>&1"', new_host_flag, new_host_user, new_host)
            }
          }
        }
      }
    }
    stage ('Check with DS Tester') {
      when { expression {dsT_host_flag} }
      steps {
        lock (ds_tester_ci_resource) {
          script {
            // Killing DS Tester if still running
            dsTesterShCmd('if [ `ps aux | grep dsTest | grep -v grep | grep -c dsTest` -ne 0 ]; then sudo killall --signal SIGINT dsTest; fi', dsT_host_flag, dsT_host_user, dsT_host)
            sh "sleep 5"
            // Starting DS Tester fresh with nohup to avoid ssh session closure impact
            dsTesterShCmd('sudo rm -f /tmp/dsTesterStart.log && ./dsTest.sh && sleep 10', dsT_host_flag, dsT_host_user, dsT_host)
            dsTesterShCmd('until [ `egrep -c "Base dictionary successfully loaded" /tmp/dsTesterStart.log` -ne 0 ]; do sleep 60; done', dsT_host_flag, dsT_host_user, dsT_host)

            // Retrieve MME S1-C IP address and SPGW-U S1-U IP address
            MME_IP = myShRetCmd('docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" cicd-oai-mme', new_host_flag, new_host_user, new_host)
            SPGWU_IP = myShRetCmd('docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" cicd-oai-spgwu-tiny', new_host_flag, new_host_user, new_host)

            // Adapt template scenario to deployment
            dsTesterShCmd('sed -e "s@DS_TESTER_IP_ADDRESS@' + dsT_host_ip_addr + '@" -e "s@MME_S1_C_IP_ADDRESS@' + MME_IP + '@" -e "s@SPGWU_S1_U_IP_ADDRESS@' + SPGWU_IP + '@" template_app_s1_verification_enb_oai.xml > ci_app_s1_verification_enb_oai.xml', dsT_host_flag, dsT_host_user, dsT_host)

            dsTesterShCmd('/usr/local/devsol/bin/dsClient -c "nodes delete"', dsT_host_flag, dsT_host_user, dsT_host)
            sh 'sleep 5'
            try {
              dsTesterShCmd('/usr/local/devsol/bin/dsClient -c "validate /home/' + dsT_host_user + '/CI-DS-TESTER/ci_app_s1_verification_enb_oai.xml"', dsT_host_flag, dsT_host_user, dsT_host)
            } catch (Exception e) {
              echo "don't care"
            }
            try {
              dsTesterShCmd('/usr/local/devsol/bin/dsClient -c "resource /home/' + dsT_host_user + '/CI-DS-TESTER/ci_app_s1_verification_enb_oai.xml"', dsT_host_flag, dsT_host_user, dsT_host)
            } catch (Exception e) {
              echo "don't care"
            }
            sh 'sleep 5'
            try {
              dsTesterShCmd('/usr/local/devsol/bin/dsClient -c "source /home/' + dsT_host_user + '/CI-DS-TESTER/ci_app_s1_verification_enb_oai.xml"', dsT_host_flag, dsT_host_user, dsT_host)
            } catch (Exception e) {
              echo "don't care"
            }
            sh 'sleep 60'
            dsTesterShCmd('/usr/local/devsol/bin/dsClient -c "nodes delete"', dsT_host_flag, dsT_host_user, dsT_host)

            sh 'sleep 10'
            dsTesterShCmd('if [ `ps aux | grep dsTest | grep -v grep | grep -c dsTest` -ne 0 ]; then sudo killall --signal SIGINT dsTest; fi', dsT_host_flag, dsT_host_user, dsT_host)
          }
        }
      }
    }
    stage ('Undeploy EPC') {
      stages {
        stage ('Undeploy Containers') {
          steps {
            script {
              // Stop all cNF to retrieve the containers log files
              try {
                myShCmd('docker exec -it cicd-oai-hss /bin/bash -c "killall --signal SIGINT oai_hss tshark"', new_host_flag, new_host_user, new_host)
              } catch (Exception e) {
                echo "Maybe the cNF crashed! Let it go to retrieve logs"
              }
              try {
                myShCmd('docker exec -it cicd-oai-mme /bin/bash -c "killall --signal SIGINT oai_mme tshark"', new_host_flag, new_host_user, new_host)
              } catch (Exception e) {
                echo "Maybe the cNF crashed! Let it go to retrieve logs"
              }
              try {
                myShCmd('docker exec -it cicd-oai-spgwc /bin/bash -c "killall --signal SIGINT oai_spgwc tshark"', new_host_flag, new_host_user, new_host)
              } catch (Exception e) {
                echo "Maybe the cNF crashed! Let it go to retrieve logs"
              }
              try {
                myShCmd('docker exec -it cicd-oai-spgwu-tiny /bin/bash -c "killall --signal SIGINT oai_spgwu tshark"', new_host_flag, new_host_user, new_host)
              } catch (Exception e) {
                echo "Maybe the cNF crashed! Let it go to retrieve logs"
              }

              sh "sleep 5"
              try {
                myShCmd('docker exec -it cicd-oai-hss /bin/bash -c "killall --signal SIGKILL oai_hss tshark"', new_host_flag, new_host_user, new_host)
              } catch (Exception e) {
                echo "HSS process was maybe already killed"
              }
              try {
                myShCmd('docker exec -it cicd-oai-mme /bin/bash -c "killall --signal SIGKILL oai_mme tshark"', new_host_flag, new_host_user, new_host)
              } catch (Exception e) {
                echo "MME process was maybe already killed"
              }
              try {
                myShCmd('docker exec -it cicd-oai-spgwc /bin/bash -c "killall --signal SIGKILL oai_spgwc tshark"', new_host_flag, new_host_user, new_host)
              } catch (Exception e) {
                echo "SPGW-C process was maybe already killed"
              }
              try {
                myShCmd('docker exec -it cicd-oai-spgwu-tiny /bin/bash -c "killall --signal SIGKILL oai_spgwu tshark"', new_host_flag, new_host_user, new_host)
              } catch (Exception e) {
                echo "SPGW-U process was maybe already killed"
              }
              sh "sleep 5"

              // Retrieve all logs and PCAP files
              myShCmd('docker cp cicd-oai-hss:/openair-hss/hss_check_run.log archives', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-hss:/tmp/hss_check_run.pcap archives', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-mme:/openair-mme/mme_check_run.log archives', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-mme:/tmp/mme_check_run.pcap archives', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-spgwc:/openair-spgwc/spgwc_check_run.log archives', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-spgwc:/tmp/spgwc_check_run.pcap archives', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-spgwu-tiny:/openair-spgwu-tiny/spgwu_check_run.log archives', new_host_flag, new_host_user, new_host)
              myShCmd('docker cp cicd-oai-spgwu-tiny:/tmp/spgwu_check_run.pcap archives', new_host_flag, new_host_user, new_host)

              sh "sleep 2"
              copyFrom2ndServer('archives/*_check_run.*', 'archives', new_host_flag, new_host_user, new_host)
              sh "python3 component/oai-hss/ci-scripts/verifySanityCheckDeployment.py --job_name=${JOB_NAME} --job_id=${BUILD_ID}"
              sh "python3 component/oai-spgwc/ci-scripts/verifySanityCheckDeployment.py --job_name=${JOB_NAME} --job_id=${BUILD_ID}"

              // Remove the containers
              myShCmd('docker rm -f cicd-cassandra cicd-oai-hss cicd-oai-mme cicd-oai-spgwc cicd-oai-spgwu-tiny', new_host_flag, new_host_user, new_host)
            }
          }
        }
        stage ('Delete Public Network') {
          steps {
            script {
              myShCmd('docker network rm cicd-oai-public-net', new_host_flag, new_host_user, new_host)
            }
          }
        }
      }
    }
    stage ('Remove Temporary Images') {
      when { expression {anyRebuildFlag} }
      steps {
        script {
          if (hssRebuildFlag) {
            myShCmd('docker image rm oai-hss:' + hssTag, new_host_flag, new_host_user, new_host)
          }
          if (mmeRebuildFlag) {
            myShCmd('docker image rm oai-mme:' + mmeTag, new_host_flag, new_host_user, new_host)
          }
          if (spgwcRebuildFlag) {
            myShCmd('docker image rm oai-spgwc:' + spgwcTag, new_host_flag, new_host_user, new_host)
          }
          if (spgwuRebuildFlag) {
            myShCmd('docker image rm oai-spgwu:' + spgwuTag, new_host_flag, new_host_user, new_host)
          }
          myShCmd('docker image prune --force', new_host_flag, new_host_user, new_host)
          // No need to remove anything in the clean-up post stage
          anyRebuildFlag = false
        }
      }
    }
  }
  post {
    always {
      script {
        try {
          myShCmd('docker rm -f cicd-cassandra cicd-oai-hss cicd-oai-mme cicd-oai-spgwc cicd-oai-spgwu-tiny', new_host_flag, new_host_user, new_host)
        } catch (Exception e) {
          echo "No problem: we may not started all containers or already destroyed"
        }
        // Removing the network
        try {
          myShCmd('docker network rm cicd-oai-public-net', new_host_flag, new_host_user, new_host)
        } catch (Exception e) {
          echo "No problem: we may not started all docker networks or already deleted"
        }
        // Removing any leftover images
        if (anyRebuildFlag) {
          if (hssRebuildFlag) {
            try {
              myShCmd('docker image rm oai-hss:' + hssTag, new_host_flag, new_host_user, new_host)
            } catch (Exception e) {
              echo "No problem: we may have already remove it"
            }
          }
          if (mmeRebuildFlag) {
            try {
              myShCmd('docker image rm oai-mme:' + mmeTag, new_host_flag, new_host_user, new_host)
            } catch (Exception e) {
              echo "No problem: we may have already remove it"
            }
          }
          if (spgwcRebuildFlag) {
            try {
              myShCmd('docker image rm oai-spgwc:' + spgwcTag, new_host_flag, new_host_user, new_host)
            } catch (Exception e) {
              echo "No problem: we may have already remove it"
            }
          }
          if (spgwuRebuildFlag) {
            try {
              myShCmd('docker image rm oai-spgwu-tiny:' + spgwuTag, new_host_flag, new_host_user, new_host)
            } catch (Exception e) {
              echo "No problem: we may have already remove it"
            }
          }
          myShCmd('docker image prune --force', new_host_flag, new_host_user, new_host)
        }

        // Zipping all archived log files
        sh "zip -r -qq fed_docker_logs.zip archives"
        if (fileExists('fed_docker_logs.zip')) {
          archiveArtifacts artifacts: 'fed_docker_logs.zip'
        }
      }
    }
  }
}

// Functions

def copyTo2ndServer(filename, flag, user, host) {
  if (flag) {
    sh "scp ${filename} ${user}@${host}:/tmp/CI-CN-FED"
  }
}

def copyFrom2ndServer(filename, target, flag, user, host) {
  if (flag) {
    sh "scp ${user}@${host}:/tmp/CI-CN-FED/${filename} ${target}"
  }
}

def myShCmd(cmd, flag, user, host) {
  if (flag) {
    sh "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN-FED && ${cmd}'"
  } else {
    sh "${cmd}"
  }
}

def myShCmdWithLog(cmd, logFile, flag, user, host) {
  if (flag) {
    sh "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN-FED && ${cmd}' > ${logFile} 2>&1"
  } else {
    sh "${cmd} > ${logFile} 2>&1"
  }
}

def myShRetCmd(cmd, flag, user, host) {
  if (flag) {
    ret = sh returnStdout: true, script: "ssh -t -t ${user}@${host} 'cd /tmp/CI-CN-FED && ${cmd}'"
  } else {
    ret = sh returnStdout: true, script: "${cmd}"
  }
  ret = ret.trim()
  return ret
}

def dsTesterShCmd(cmd, flag, user, host) {
  if (flag) {
    sh "ssh -t -t ${user}@${host} 'cd /home/${user}/CI-DS-TESTER && ${cmd}'"
  }
}
